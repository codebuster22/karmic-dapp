{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "transferables",
          "type": "bool"
        }
      ],
      "name": "TierChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "tierUris",
          "type": "string[]"
        }
      ],
      "name": "addBoxTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "allBalancesOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "boxTokenTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnFromMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "name": "changeBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "boxTokens",
          "type": "address[]"
        }
      ],
      "name": "claimGovernanceTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "boxToken",
          "type": "address"
        }
      ],
      "name": "createTokenTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBoxTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "boxTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintToMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenTiers",
      "outputs": [
        {
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "boxToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFromWithoutData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uriIds",
          "type": "string[]"
        }
      ],
      "name": "updateMultipleUriIdentifiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        }
      ],
      "name": "updateTransferableStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        }
      ],
      "name": "updateUriIdentifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f1490513d7fa66f1cccfa21fc0d8c7ae0314a132018665e0b8983e327aa7cea",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5176996",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000040020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000040000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3a20b43365a78f7131dc5ce08f4578b6a1f213b86fa9ebf6653370ca3e157424",
    "transactionHash": "0x8f1490513d7fa66f1cccfa21fc0d8c7ae0314a132018665e0b8983e327aa7cea",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x8f1490513d7fa66f1cccfa21fc0d8c7ae0314a132018665e0b8983e327aa7cea",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3a20b43365a78f7131dc5ce08f4578b6a1f213b86fa9ebf6653370ca3e157424"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "5176996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "http://localhost:3000/"
  ],
  "numDeployments": 1,
  "solcInputHash": "9aff664fa1fc10590802ac2f3edf9155",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferables\",\"type\":\"bool\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tierUris\",\"type\":\"string[]\"}],\"name\":\"addBoxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"allBalancesOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boxTokenTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnFromMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"name\":\"changeBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"boxTokens\",\"type\":\"address[]\"}],\"name\":\"claimGovernanceTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"boxToken\",\"type\":\"address\"}],\"name\":\"createTokenTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoxTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"boxTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintToMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTiers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"boxToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uriIds\",\"type\":\"string[]\"}],\"name\":\"updateMultipleUriIdentifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"updateTransferableStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"}],\"name\":\"updateUriIdentifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"burns specified amount token(s) of specific id from specified account\",\"params\":{\"account\":\"address of token holder\",\"amount\":\"units of token to be burnt from beneficiary\",\"id\":\"id of token, aka. tier\"}},\"burnFromMultiple(address[],uint256[],uint256[])\":{\"details\":\"burns from multiple addresses arbitrary units of tokens of ONE token id per address                      example: burn 3 units of tokenId 1 from alice and 4 units of tokenId 2 froms bob\",\"params\":{\"accounts\":\"list of token holder addresses\",\"amounts\":\"list of burn amounts\",\"tokenIds\":\"list of token ids (aka tiers)\"}},\"changeBaseUri(string)\":{\"details\":\"sets a base uri, that is the first part of the url where the metadata for a tokenId is stored\",\"params\":{\"_newBaseUri\":\"baseUrl (e.g. www.filestoring.com/)\"}},\"createTokenTier(uint256,string,bool,address)\":{\"details\":\"creates a new token tier\",\"params\":{\"tokenId\":\"identifier for the new token tier\",\"transferable\":\"determines if tokens from specific tier should be transferable or not\",\"uriId\":\"identifier that is appended to the baseUri together forming the uri where the metadata lives\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256)\":{\"details\":\"mints specified amount token(s) of specific id to specified account\",\"params\":{\"account\":\"beneficiary address\",\"amount\":\"units of token to be minted to beneficiary\",\"id\":\"id of token, aka. tier\"}},\"mintToMultiple(address[],uint256[],uint256[])\":{\"details\":\"mints to multiple addresses arbitrary units of tokens of ONE token id per address\",\"params\":{\"accounts\":\"list of beneficiary addresses\",\"amounts\":\"list of mint amounts\",\"tokenIds\":\"list of token ids (aka tiers)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"transfers tokens from one address to another allowing custom data parameter\",\"params\":{\"amount\":\"amount of token to be transferred\",\"from\":\"address from which token will be transferred\",\"id\":\"id of token to be transferred\",\"to\":\"recipient of address\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferFromWithoutData(address,address,uint256,uint256)\":{\"details\":\"transfers tokens from one address to another and uses 0x0 as default data parameter\",\"params\":{\"amount\":\"amount of token to be transferred\",\"from\":\"address from which token will be transferred\",\"id\":\"id of token to be transferred\",\"to\":\"recipient of address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMultipleUriIdentifiers(uint256[],string[])\":{\"details\":\"update uri identifiers for multiple token ids (tiers)\",\"params\":{\"tokenIds\":\"tokenIds for which the uri should be updated (must be in same order as uriIds)\",\"uriIds\":\"identifiers that are appended to the baseUri together forming the uri where the metadata lives (must be in same order ass tokenIds)\"}},\"updateTransferableStatus(uint256,bool)\":{\"details\":\"updates transferability for a given token id (tier)\",\"params\":{\"tokenId\":\"tokenId for which transferability should be updated\",\"transferable\":\"determines whether tokens from tier should be transferable or not\"}},\"updateUriIdentifier(uint256,string)\":{\"details\":\"updates the identifier that is appended to the baseUri for a specific tokenId (tier)\",\"params\":{\"tokenId\":\"tokenId for which the uri should be updated\",\"uriId\":\"identifier that is appended to the baseUri together forming the uri where the metadata lives\"}},\"uri(uint256)\":{\"details\":\"returns the uri for a given token\",\"params\":{\"tokenId\":\"tokenId for which the uri should be retrieved\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintToMultiple(address[],uint256[],uint256[])\":{\"notice\":\"example: mint 3 units of tokenId 1 to alice and 4 units of tokenId 2 to bob\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"this is the standard transfer interface for ERC1155 tokens which contracts expect\"},\"transferFromWithoutData(address,address,uint256,uint256)\":{\"notice\":\"this is mainly used for manual contract interactions via etherscan\"},\"uri(uint256)\":{\"notice\":\"consists of a concatenation of baseUri and uriId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Karmic.sol\":\"Karmic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Badger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Badger is a ERC1155 token used for governance.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/Strings.sol\\\";\\n\\ncontract Badger is Ownable, ERC1155 {\\n    using Strings for string;\\n\\n    /*\\n        State variables\\n    */\\n\\n    mapping(uint256 => TokenTier) public tokenTiers; // tokenId => TokenTier\\n\\n    /*\\n        Structs\\n    */\\n\\n    struct TokenTier {\\n        string uriId;\\n        bool transferable;\\n        address boxToken;\\n    }\\n\\n    /*\\n        Events\\n    */\\n\\n    event TierChange(uint256 indexed tokenId, string uriId, bool transferables);\\n\\n    /*\\n        Modifiers\\n    */\\n\\n    modifier isSameLength(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] memory amounts\\n    ) {\\n        require(\\n            accounts.length == tokenIds.length &&\\n                tokenIds.length == amounts.length,\\n            \\\"Input array mismatch\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isTier(uint256 tokenId) {\\n        require(\\n            !_isEmptyString(tokenTiers[tokenId].uriId),\\n            \\\"Tier does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isValidString(string calldata uriId) {\\n        require(!_isEmptyString(uriId), \\\"String cannot be empty\\\");\\n        _;\\n    }\\n\\n    modifier isValidTransfer(uint256 tokenId, address from) {\\n        require(\\n            tokenTiers[tokenId].transferable,\\n            \\\"Transfer disabled for this tier\\\"\\n        );\\n        require(\\n            owner() == _msgSender() ||\\n                from == _msgSender() ||\\n                isApprovedForAll(from, _msgSender()),\\n            \\\"Unauthorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n        Constructor\\n    */\\n\\n    constructor(string memory _newBaseUri) ERC1155(_newBaseUri) {}\\n\\n    /*\\n        Minting & burning\\n    */\\n\\n    /**\\n     * @dev                 mints specified amount token(s) of specific id to specified account\\n     * @param account       beneficiary address\\n     * @param id            id of token, aka. tier\\n     * @param amount        units of token to be minted to beneficiary\\n     */\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyOwner {\\n        bytes memory data;\\n\\n        _mint(account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev                 burns specified amount token(s) of specific id from specified account\\n     * @param account       address of token holder\\n     * @param id            id of token, aka. tier\\n     * @param amount        units of token to be burnt from beneficiary\\n     */\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyOwner {\\n        _burn(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev                 mints to multiple addresses arbitrary units of tokens of ONE token id per address\\n     * @notice              example: mint 3 units of tokenId 1 to alice and 4 units of tokenId 2 to bob\\n     * @param accounts      list of beneficiary addresses\\n     * @param tokenIds      list of token ids (aka tiers)\\n     * @param amounts       list of mint amounts\\n     */\\n    function mintToMultiple(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) public onlyOwner isSameLength(accounts, tokenIds, amounts) {\\n        bytes memory data;\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _mint(accounts[i], tokenIds[i], amounts[i], data);\\n        }\\n    }\\n\\n    /**\\n     * @dev                 burns from multiple addresses arbitrary units of tokens of ONE token id per address\\n     *                      example: burn 3 units of tokenId 1 from alice and 4 units of tokenId 2 froms bob\\n     * @param accounts      list of token holder addresses\\n     * @param tokenIds      list of token ids (aka tiers)\\n     * @param amounts       list of burn amounts\\n     */\\n    function burnFromMultiple(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) public onlyOwner isSameLength(accounts, tokenIds, amounts) {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _burn(accounts[i], tokenIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /*\\n        Transferring\\n    */\\n\\n    /**\\n     * @dev                 transfers tokens from one address to another and uses 0x0 as default data parameter\\n     * @notice              this is mainly used for manual contract interactions via etherscan\\n     * @param from          address from which token will be transferred\\n     * @param to            recipient of address\\n     * @param id            id of token to be transferred\\n     * @param amount        amount of token to be transferred\\n     */\\n    function transferFromWithoutData(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public isValidTransfer(id, from) {\\n        bytes memory data;\\n\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev                 transfers tokens from one address to another allowing custom data parameter\\n     * @notice              this is the standard transfer interface for ERC1155 tokens which contracts expect\\n     * @param from          address from which token will be transferred\\n     * @param to            recipient of address\\n     * @param id            id of token to be transferred\\n     * @param amount        amount of token to be transferred\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override isValidTransfer(id, from) {\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /*\\n        Configuration\\n    */\\n\\n    /**\\n     * @dev                 sets a base uri, that is the first part of the url where the metadata for a tokenId is stored\\n     * @param _newBaseUri   baseUrl (e.g. www.filestoring.com/)\\n     */\\n    function changeBaseUri(string calldata _newBaseUri)\\n        public\\n        onlyOwner\\n        isValidString(_newBaseUri)\\n    {\\n        _setURI(_newBaseUri);\\n    }\\n\\n    /**\\n     * @dev                 creates a new token tier\\n     * @param tokenId       identifier for the new token tier\\n     * @param uriId         identifier that is appended to the baseUri together forming the uri where the metadata lives\\n     * @param transferable  determines if tokens from specific tier should be transferable or not\\n     */\\n    function createTokenTier(\\n        uint256 tokenId,\\n        string calldata uriId,\\n        bool transferable,\\n        address boxToken\\n    ) public onlyOwner isValidString(uriId) {\\n        require(\\n            _isEmptyString(tokenTiers[tokenId].uriId),\\n            \\\"Tier already exists for tokenId\\\"\\n        );\\n\\n        tokenTiers[tokenId] = TokenTier(uriId, transferable, boxToken);\\n        emit TierChange(tokenId, uriId, transferable);\\n    }\\n\\n    /**\\n     * @dev                 updates the identifier that is appended to the baseUri for a specific tokenId (tier)\\n     * @param tokenId       tokenId for which the uri should be updated\\n     * @param uriId         identifier that is appended to the baseUri together forming the uri where the metadata lives\\n     */\\n    function updateUriIdentifier(uint256 tokenId, string calldata uriId)\\n        public\\n        onlyOwner\\n    {\\n        _updateUriIdentifier(tokenId, uriId);\\n    }\\n\\n    /**\\n     * @dev                 update uri identifiers for multiple token ids (tiers)\\n     * @param tokenIds      tokenIds for which the uri should be updated (must be in same order as uriIds)\\n     * @param uriIds        identifiers that are appended to the baseUri together forming the uri where the metadata lives (must be in same order ass tokenIds)\\n     */\\n    function updateMultipleUriIdentifiers(\\n        uint256[] calldata tokenIds,\\n        string[] calldata uriIds\\n    ) public onlyOwner {\\n        require(tokenIds.length == uriIds.length, \\\"Input array mismatch\\\");\\n\\n        for (uint8 i = 0; i < tokenIds.length; i++) {\\n            _updateUriIdentifier(tokenIds[i], uriIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev                 updates transferability for a given token id (tier)\\n     * @param tokenId       tokenId for which transferability should be updated\\n     * @param transferable  determines whether tokens from tier should be transferable or not\\n     */\\n    function updateTransferableStatus(uint256 tokenId, bool transferable)\\n        public\\n        onlyOwner\\n        isTier(tokenId)\\n    {\\n        tokenTiers[tokenId].transferable = transferable;\\n        emit TierChange(tokenId, tokenTiers[tokenId].uriId, transferable);\\n    }\\n\\n    /*\\n        Queries\\n    */\\n\\n    /**\\n     * @dev                 returns the uri for a given token\\n     * @notice              consists of a concatenation of baseUri and uriId\\n     * @param tokenId       tokenId for which the uri should be retrieved\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        string memory baseUri = super.uri(tokenId);\\n        return baseUri.append(tokenTiers[tokenId].uriId);\\n    }\\n\\n    /*\\n        Internal functions\\n    */\\n\\n    function _updateUriIdentifier(uint256 tokenId, string calldata uriId)\\n        private\\n        isTier(tokenId)\\n        isValidString(uriId)\\n    {\\n        tokenTiers[tokenId].uriId = uriId;\\n        emit TierChange(tokenId, uriId, tokenTiers[tokenId].transferable);\\n    }\\n\\n    function _isEmptyString(string memory uriId) internal pure returns (bool) {\\n        return bytes(uriId).length == 0;\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override isTier(id) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal override isTier(id) {\\n        super._burn(account, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7f165327e700e33099b21a10d6f989ef76f778372b662faff53d0457042c6baa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Karmic.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Badger.sol\\\";\\n\\ncontract Karmic is Badger{\\n    mapping(address => uint256) public boxTokenTiers;\\n    uint256 boxTokenCounter;\\n\\n    constructor(string memory _newBaseUri) Badger(_newBaseUri) {}\\n\\n    function addBoxTokens(address[] memory tokens, string[] calldata tierUris) external onlyOwner {\\n        uint256 counter = boxTokenCounter;\\n\\n        for(uint8 i; i< tokens.length; i++) {\\n            address token = tokens[i];\\n            require(boxTokenTiers[token] == 0, \\\"DUPLICATE_TOKEN\\\");\\n            boxTokenTiers[token] = counter + 1;\\n            createTokenTier(counter + 1, tierUris[i], false, token);\\n            counter++;\\n        }\\n\\n        boxTokenCounter = counter;\\n    }\\n\\n    function getBoxTokens() public view returns (address[] memory boxTokens){\\n        boxTokens = new address[](boxTokenCounter);\\n        for(uint8 i = 1; i <= boxTokenCounter; i++) {\\n            boxTokens[i-1] = tokenTiers[i].boxToken;\\n        }\\n    }\\n\\n    function claimGovernanceTokens(address[] memory boxTokens) external {\\n        bytes memory data;\\n\\n        address token;\\n        for(uint8 i; i < boxTokens.length; i++) {\\n            token = boxTokens[i];\\n            uint256 amount = IERC20(token).balanceOf(msg.sender);\\n            uint256 tokenId = boxTokenTiers[token];\\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\\n            _mint(msg.sender, tokenId, amount, data);\\n        }\\n    }\\n\\n    function allBalancesOf(address holder) external view returns (uint256[] memory balances) {\\n        balances = new uint256[](boxTokenCounter);\\n        for(uint8 i; i < boxTokenCounter; i++) {\\n            balances[i] = balanceOf(holder, i + 1);\\n        }\\n    } \\n}\\n\",\"keccak256\":\"0x28715ae33064c9a0c5699ea82f8ca400a8600dccbca55ba3c729131785d8c349\",\"license\":\"Unlicense\"},\"contracts/libraries/Strings.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    function append(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(a, b));\\n    }\\n}\\n\",\"keccak256\":\"0x8558fa32cafd19f15bd688c459e939a2206773ce80aa05f70235430cc0ac725b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200605b3803806200605b83398181016040528101906200003791906200027d565b8080620000596200004d6200007360201b60201c565b6200007b60201b60201c565b6200006a816200013f60201b60201c565b50505062000432565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060039080519060200190620001579291906200015b565b5050565b828054620001699062000357565b90600052602060002090601f0160209004810192826200018d5760008555620001d9565b82601f10620001a857805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d8578251825591602001919060010190620001bb565b5b509050620001e89190620001ec565b5090565b5b8082111562000207576000816000905550600101620001ed565b5090565b6000620002226200021c84620002eb565b620002c2565b9050828152602081018484840111156200023b57600080fd5b6200024884828562000321565b509392505050565b600082601f8301126200026257600080fd5b8151620002748482602086016200020b565b91505092915050565b6000602082840312156200029057600080fd5b600082015167ffffffffffffffff811115620002ab57600080fd5b620002b98482850162000250565b91505092915050565b6000620002ce620002e1565b9050620002dc82826200038d565b919050565b6000604051905090565b600067ffffffffffffffff821115620003095762000308620003f2565b5b620003148262000421565b9050602081019050919050565b60005b838110156200034157808201518184015260208101905062000324565b8381111562000351576000848401525b50505050565b600060028204905060018216806200037057607f821691505b60208210811415620003875762000386620003c3565b5b50919050565b620003988262000421565b810181811067ffffffffffffffff82111715620003ba57620003b9620003f2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b615c1980620004426000396000f3fe608060405234801561001057600080fd5b50600436106101a85760003560e01c80638273a411116100f9578063c1cef73611610097578063f242432a11610071578063f242432a146104c5578063f2fde38b146104e1578063f5298aca146104fd578063fa6cca1014610519576101a8565b8063c1cef7361461045d578063d2047b5414610479578063e985e9c514610495576101a8565b80638e7cb179116100d35780638e7cb179146103d957806397c7cc8714610409578063a22cb46514610425578063ba74869814610441576101a8565b80638273a4111461036f57806384385b6b1461039f5780638da5cb5b146103bb576101a8565b8063351521cd116101665780635969caf1116101405780635969caf1146102f9578063715018a614610315578063732a4d311461031f578063818f2e421461033d576101a8565b8063351521cd14610291578063492d306b146102ad5780634e1273f4146102c9576101a8565b8062fdd58e146101ad57806301ffc9a7146101dd578063036789d11461020d5780630e89341c14610229578063156e29f6146102595780632eb2c2d614610275575b600080fd5b6101c760048036038101906101c291906140ef565b610535565b6040516101d4919061506c565b60405180910390f35b6101f760048036038101906101f291906143d9565b6105ff565b6040516102049190614cef565b60405180910390f35b6102276004803603810190610222919061433b565b6106e1565b005b610243600480360381019061023e9190614470565b610869565b6040516102509190614d3c565b60405180910390f35b610273600480360381019061026e919061412b565b610931565b005b61028f600480360381019061028a9190613f02565b6109c1565b005b6102ab60048036038101906102a6919061417a565b610a62565b005b6102c760048036038101906102c2919061442b565b610c80565b005b6102e360048036038101906102de91906142cf565b610dde565b6040516102f09190614c96565b60405180910390f35b610313600480360381019061030e91906144c2565b610f8f565b005b61031d611175565b005b6103276111fd565b6040516103349190614c74565b60405180910390f35b61035760048036038101906103529190614470565b611358565b60405161036693929190614d5e565b60405180910390f35b61038960048036038101906103849190613e9d565b611437565b6040516103969190614c96565b60405180910390f35b6103b960048036038101906103b49190613fc1565b611536565b005b6103c3611684565b6040516103d09190614b60565b60405180910390f35b6103f360048036038101906103ee9190613e9d565b6116ad565b604051610400919061506c565b60405180910390f35b610423600480360381019061041e91906144fe565b6116c5565b005b61043f600480360381019061043a91906140b3565b611751565b005b61045b6004803603810190610456919061425f565b611767565b005b61047760048036038101906104729190614556565b6119a9565b005b610493600480360381019061048e919061417a565b611cf0565b005b6104af60048036038101906104aa9190613ec6565b611f12565b6040516104bc9190614cef565b60405180910390f35b6104df60048036038101906104da9190614024565b611fa6565b005b6104fb60048036038101906104f69190613e9d565b6120f2565b005b6105176004803603810190610512919061412b565b6121ea565b005b610533600480360381019061052e919061421e565b612276565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90614e2c565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106ca57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106da57506106d982612456565b5b9050919050565b6106e96124c0565b73ffffffffffffffffffffffffffffffffffffffff16610707611684565b73ffffffffffffffffffffffffffffffffffffffff161461075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490614f6c565b60405180910390fd5b8181905084849050146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90614e8c565b60405180910390fd5b60005b848490508160ff1610156108625761084f85858360ff168181106107f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013584848460ff16818110610838577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061084a91906150b0565b6124c8565b808061085a906154af565b9150506107a8565b5050505050565b60606000610876836126cc565b905061092960046000858152602001908152602001600020600001805461089c90615403565b80601f01602080910402602001604051908101604052809291908181526020018280546108c890615403565b80156109155780601f106108ea57610100808354040283529160200191610915565b820191906000526020600020905b8154815290600101906020018083116108f857829003601f168201915b50505050508261276090919063ffffffff16565b915050919050565b6109396124c0565b73ffffffffffffffffffffffffffffffffffffffff16610957611684565b73ffffffffffffffffffffffffffffffffffffffff16146109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490614f6c565b60405180910390fd5b60606109bb8484848461278c565b50505050565b6109c96124c0565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a0f5750610a0e85610a096124c0565b611f12565b5b610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4590614eec565b60405180910390fd5b610a5b8585858585612887565b5050505050565b610a6a6124c0565b73ffffffffffffffffffffffffffffffffffffffff16610a88611684565b73ffffffffffffffffffffffffffffffffffffffff1614610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590614f6c565b60405180910390fd5b85858585858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508282905085859050148015610b3c5750805183839050145b610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290614e8c565b60405180910390fd5b60005b8b8b9050811015610c7257610c5f8c8c83818110610bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610bda9190613e9d565b8b8b84818110610c13577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358a8a85818110610c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135612bea565b8080610c6a90615466565b915050610b7e565b505050505050505050505050565b610c886124c0565b73ffffffffffffffffffffffffffffffffffffffff16610ca6611684565b73ffffffffffffffffffffffffffffffffffffffff1614610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390614f6c565b60405180910390fd5b8181610d4b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ce3565b15610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d829061504c565b60405180910390fd5b610dd884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612cf0565b50505050565b60608151835114610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b90614fac565b60405180910390fd5b6000835167ffffffffffffffff811115610e67577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e955781602001602082028036833780820191505090505b50905060005b8451811015610f8457610f2e858281518110610ee0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610535565b828281518110610f67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080610f7d90615466565b9050610e9b565b508091505092915050565b610f976124c0565b73ffffffffffffffffffffffffffffffffffffffff16610fb5611684565b73ffffffffffffffffffffffffffffffffffffffff161461100b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100290614f6c565b60405180910390fd5b816110b360046000838152602001908152602001600020600001805461103090615403565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90615403565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b5050505050612ce3565b156110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90614eac565b60405180910390fd5b816004600085815260200190815260200160002060010160006101000a81548160ff021916908315150217905550827f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced6004600086815260200190815260200160002060000184604051611168929190614d9c565b60405180910390a2505050565b61117d6124c0565b73ffffffffffffffffffffffffffffffffffffffff1661119b611684565b73ffffffffffffffffffffffffffffffffffffffff16146111f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e890614f6c565b60405180910390fd5b6111fb6000612d0a565b565b606060065467ffffffffffffffff811115611241577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561126f5781602001602082028036833780820191505090505b5090506000600190505b6006548160ff161161135457600460008260ff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001836112cd919061530c565b60ff1681518110611307577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061134c906154af565b915050611279565b5090565b600460205280600052604060002060009150905080600001805461137b90615403565b80601f01602080910402602001604051908101604052809291908181526020018280546113a790615403565b80156113f45780601f106113c9576101008083540402835291602001916113f4565b820191906000526020600020905b8154815290600101906020018083116113d757829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b606060065467ffffffffffffffff81111561147b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114a95781602001602082028036833780820191505090505b50905060005b6006548160ff161015611530576114d5836001836114cd91906152d5565b60ff16610535565b828260ff1681518110611511577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611528906154af565b9150506114af565b50919050565b81846004600083815260200190815260200160002060010160009054906101000a900460ff1661159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159290614fec565b60405180910390fd5b6115a36124c0565b73ffffffffffffffffffffffffffffffffffffffff166115c1611684565b73ffffffffffffffffffffffffffffffffffffffff16148061161557506115e66124c0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061162d575061162c816116276124c0565b611f12565b5b61166c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166390614e0c565b60405180910390fd5b606061167b8787878785612dce565b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60056020528060005260406000206000915090505481565b6116cd6124c0565b73ffffffffffffffffffffffffffffffffffffffff166116eb611684565b73ffffffffffffffffffffffffffffffffffffffff1614611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890614f6c565b60405180910390fd5b61174c8383836124c8565b505050565b61176361175c6124c0565b8383613053565b5050565b61176f6124c0565b73ffffffffffffffffffffffffffffffffffffffff1661178d611684565b73ffffffffffffffffffffffffffffffffffffffff16146117e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117da90614f6c565b60405180910390fd5b6000600654905060005b84518160ff16101561199b576000858260ff1681518110611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba90614f0c565b60405180910390fd5b6001836118d0919061527f565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611979600184611923919061527f565b86868560ff1681811061195f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061197191906150b0565b6000856119a9565b828061198490615466565b935050508080611993906154af565b9150506117ed565b508060068190555050505050565b6119b16124c0565b73ffffffffffffffffffffffffffffffffffffffff166119cf611684565b73ffffffffffffffffffffffffffffffffffffffff1614611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c90614f6c565b60405180910390fd5b8383611a7482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ce3565b15611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab9061504c565b60405180910390fd5b611b5b600460008981526020019081526020016000206000018054611ad890615403565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0490615403565b8015611b515780601f10611b2657610100808354040283529160200191611b51565b820191906000526020600020905b815481529060010190602001808311611b3457829003601f168201915b5050505050612ce3565b611b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b919061502c565b60405180910390fd5b604051806060016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185151581526020018473ffffffffffffffffffffffffffffffffffffffff16815250600460008981526020019081526020016000206000820151816000019080519060200190611c40929190613a25565b5060208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050867f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced878787604051611cdf93929190614d0a565b60405180910390a250505050505050565b611cf86124c0565b73ffffffffffffffffffffffffffffffffffffffff16611d16611684565b73ffffffffffffffffffffffffffffffffffffffff1614611d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6390614f6c565b60405180910390fd5b85858585858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508282905085859050148015611dca5750805183839050145b611e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0090614e8c565b60405180910390fd5b606060005b8c8c9050811015611f0357611ef08d8d83818110611e55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611e6a9190613e9d565b8c8c84818110611ea3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358b8b85818110611ee3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358561278c565b8080611efb90615466565b915050611e0e565b50505050505050505050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b82856004600083815260200190815260200160002060010160009054906101000a900460ff1661200b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200290614fec565b60405180910390fd5b6120136124c0565b73ffffffffffffffffffffffffffffffffffffffff16612031611684565b73ffffffffffffffffffffffffffffffffffffffff16148061208557506120566124c0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061209d575061209c816120976124c0565b611f12565b5b6120dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d390614e0c565b60405180910390fd5b6120e98787878787612dce565b50505050505050565b6120fa6124c0565b73ffffffffffffffffffffffffffffffffffffffff16612118611684565b73ffffffffffffffffffffffffffffffffffffffff161461216e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216590614f6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d590614e4c565b60405180910390fd5b6121e781612d0a565b50565b6121f26124c0565b73ffffffffffffffffffffffffffffffffffffffff16612210611684565b73ffffffffffffffffffffffffffffffffffffffff1614612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225d90614f6c565b60405180910390fd5b612271838383612bea565b505050565b60606000805b83518160ff16101561245057838160ff16815181106122c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915060008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016123099190614b60565b60206040518083038186803b15801561232157600080fd5b505afa158015612335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123599190614499565b90506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016123dc93929190614be3565b602060405180830381600087803b1580156123f657600080fd5b505af115801561240a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242e91906143b0565b5061243b3382848861278c565b50508080612448906154af565b91505061227c565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b826125706004600083815260200190815260200160002060000180546124ed90615403565b80601f016020809104026020016040519081016040528092919081815260200182805461251990615403565b80156125665780601f1061253b57610100808354040283529160200191612566565b820191906000526020600020905b81548152906001019060200180831161254957829003601f168201915b5050505050612ce3565b156125b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a790614eac565b60405180910390fd5b82826125ff82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ce3565b1561263f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126369061504c565b60405180910390fd5b8484600460008981526020019081526020016000206000019190612664929190613aab565b50857f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced8686600460008b815260200190815260200160002060010160009054906101000a900460ff166040516126bc93929190614d0a565b60405180910390a2505050505050565b6060600380546126db90615403565b80601f016020809104026020016040519081016040528092919081815260200182805461270790615403565b80156127545780601f1061272957610100808354040283529160200191612754565b820191906000526020600020905b81548152906001019060200180831161273757829003601f168201915b50505050509050919050565b60608282604051602001612775929190614b3c565b604051602081830303815290604052905092915050565b826128346004600083815260200190815260200160002060000180546127b190615403565b80601f01602080910402602001604051908101604052809291908181526020018280546127dd90615403565b801561282a5780601f106127ff5761010080835404028352916020019161282a565b820191906000526020600020905b81548152906001019060200180831161280d57829003601f168201915b5050505050612ce3565b15612874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286b90614eac565b60405180910390fd5b612880858585856131c0565b5050505050565b81518351146128cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c290614fcc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561293b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293290614ecc565b60405180910390fd5b60006129456124c0565b9050612955818787878787613357565b60005b8451811015612b5557600085828151811061299c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008583815181106129e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7a90614f4c565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b3a919061527f565b9250508190555050505080612b4e90615466565b9050612958565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612bcc929190614cb8565b60405180910390a4612be281878787878761335f565b505050505050565b81612c92600460008381526020019081526020016000206000018054612c0f90615403565b80601f0160208091040260200160405190810160405280929190818152602001828054612c3b90615403565b8015612c885780601f10612c5d57610100808354040283529160200191612c88565b820191906000526020600020905b815481529060010190602001808311612c6b57829003601f168201915b5050505050612ce3565b15612cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc990614eac565b60405180910390fd5b612cdd848484613546565b50505050565b6000808251149050919050565b8060039080519060200190612d06929190613a25565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3590614ecc565b60405180910390fd5b6000612e486124c0565b9050612e68818787612e5988613765565b612e6288613765565b87613357565b60006001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef790614f4c565b60405180910390fd5b8381036001600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fb7919061527f565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051613034929190615087565b60405180910390a461304a82888888888861382b565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130b990614f8c565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516131b39190614cef565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613230576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132279061500c565b60405180910390fd5b600061323a6124c0565b905061325b8160008761324c88613765565b61325588613765565b87613357565b826001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132bb919061527f565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051613339929190615087565b60405180910390a46133508160008787878761382b565b5050505050565b505050505050565b61337e8473ffffffffffffffffffffffffffffffffffffffff16613a12565b1561353e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016133c4959493929190614b7b565b602060405180830381600087803b1580156133de57600080fd5b505af192505050801561340f57506040513d601f19601f8201168201806040525081019061340c9190614402565b60015b6134b55761341b615566565b806308c379a014156134785750613430615af1565b8061343b575061347a565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346f9190614d3c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ac90614dcc565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461353c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353390614dec565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ad90614f2c565b60405180910390fd5b60006135c06124c0565b90506135f0818560006135d287613765565b6135db87613765565b60405180602001604052806000815250613357565b60006001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015613688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161367f90614e6c565b60405180910390fd5b8281036001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051613756929190615087565b60405180910390a45050505050565b60606000600167ffffffffffffffff8111156137aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156137d85781602001602082028036833780820191505090505b5090508281600081518110613816577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b61384a8473ffffffffffffffffffffffffffffffffffffffff16613a12565b15613a0a578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613890959493929190614c1a565b602060405180830381600087803b1580156138aa57600080fd5b505af19250505080156138db57506040513d601f19601f820116820180604052508101906138d89190614402565b60015b613981576138e7615566565b806308c379a0141561394457506138fc615af1565b806139075750613946565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161393b9190614d3c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161397890614dcc565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ff90614dec565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b828054613a3190615403565b90600052602060002090601f016020900481019282613a535760008555613a9a565b82601f10613a6c57805160ff1916838001178555613a9a565b82800160010185558215613a9a579182015b82811115613a99578251825591602001919060010190613a7e565b5b509050613aa79190613b31565b5090565b828054613ab790615403565b90600052602060002090601f016020900481019282613ad95760008555613b20565b82601f10613af257803560ff1916838001178555613b20565b82800160010185558215613b20579182015b82811115613b1f578235825591602001919060010190613b04565b5b509050613b2d9190613b31565b5090565b5b80821115613b4a576000816000905550600101613b32565b5090565b6000613b61613b5c8461512c565b615107565b90508083825260208201905082856020860282011115613b8057600080fd5b60005b85811015613bb05781613b968882613c64565b845260208401935060208301925050600181019050613b83565b5050509392505050565b6000613bcd613bc884615158565b615107565b90508083825260208201905082856020860282011115613bec57600080fd5b60005b85811015613c1c5781613c028882613e73565b845260208401935060208301925050600181019050613bef565b5050509392505050565b6000613c39613c3484615184565b615107565b905082815260208101848484011115613c5157600080fd5b613c5c8482856153c1565b509392505050565b600081359050613c7381615b87565b92915050565b60008083601f840112613c8b57600080fd5b8235905067ffffffffffffffff811115613ca457600080fd5b602083019150836020820283011115613cbc57600080fd5b9250929050565b600082601f830112613cd457600080fd5b8135613ce4848260208601613b4e565b91505092915050565b60008083601f840112613cff57600080fd5b8235905067ffffffffffffffff811115613d1857600080fd5b602083019150836020820283011115613d3057600080fd5b9250929050565b60008083601f840112613d4957600080fd5b8235905067ffffffffffffffff811115613d6257600080fd5b602083019150836020820283011115613d7a57600080fd5b9250929050565b600082601f830112613d9257600080fd5b8135613da2848260208601613bba565b91505092915050565b600081359050613dba81615b9e565b92915050565b600081519050613dcf81615b9e565b92915050565b600081359050613de481615bb5565b92915050565b600081519050613df981615bb5565b92915050565b600082601f830112613e1057600080fd5b8135613e20848260208601613c26565b91505092915050565b60008083601f840112613e3b57600080fd5b8235905067ffffffffffffffff811115613e5457600080fd5b602083019150836001820283011115613e6c57600080fd5b9250929050565b600081359050613e8281615bcc565b92915050565b600081519050613e9781615bcc565b92915050565b600060208284031215613eaf57600080fd5b6000613ebd84828501613c64565b91505092915050565b60008060408385031215613ed957600080fd5b6000613ee785828601613c64565b9250506020613ef885828601613c64565b9150509250929050565b600080600080600060a08688031215613f1a57600080fd5b6000613f2888828901613c64565b9550506020613f3988828901613c64565b945050604086013567ffffffffffffffff811115613f5657600080fd5b613f6288828901613d81565b935050606086013567ffffffffffffffff811115613f7f57600080fd5b613f8b88828901613d81565b925050608086013567ffffffffffffffff811115613fa857600080fd5b613fb488828901613dff565b9150509295509295909350565b60008060008060808587031215613fd757600080fd5b6000613fe587828801613c64565b9450506020613ff687828801613c64565b935050604061400787828801613e73565b925050606061401887828801613e73565b91505092959194509250565b600080600080600060a0868803121561403c57600080fd5b600061404a88828901613c64565b955050602061405b88828901613c64565b945050604061406c88828901613e73565b935050606061407d88828901613e73565b925050608086013567ffffffffffffffff81111561409a57600080fd5b6140a688828901613dff565b9150509295509295909350565b600080604083850312156140c657600080fd5b60006140d485828601613c64565b92505060206140e585828601613dab565b9150509250929050565b6000806040838503121561410257600080fd5b600061411085828601613c64565b925050602061412185828601613e73565b9150509250929050565b60008060006060848603121561414057600080fd5b600061414e86828701613c64565b935050602061415f86828701613e73565b925050604061417086828701613e73565b9150509250925092565b6000806000806000806060878903121561419357600080fd5b600087013567ffffffffffffffff8111156141ad57600080fd5b6141b989828a01613c79565b9650965050602087013567ffffffffffffffff8111156141d857600080fd5b6141e489828a01613d37565b9450945050604087013567ffffffffffffffff81111561420357600080fd5b61420f89828a01613d37565b92509250509295509295509295565b60006020828403121561423057600080fd5b600082013567ffffffffffffffff81111561424a57600080fd5b61425684828501613cc3565b91505092915050565b60008060006040848603121561427457600080fd5b600084013567ffffffffffffffff81111561428e57600080fd5b61429a86828701613cc3565b935050602084013567ffffffffffffffff8111156142b757600080fd5b6142c386828701613ced565b92509250509250925092565b600080604083850312156142e257600080fd5b600083013567ffffffffffffffff8111156142fc57600080fd5b61430885828601613cc3565b925050602083013567ffffffffffffffff81111561432557600080fd5b61433185828601613d81565b9150509250929050565b6000806000806040858703121561435157600080fd5b600085013567ffffffffffffffff81111561436b57600080fd5b61437787828801613d37565b9450945050602085013567ffffffffffffffff81111561439657600080fd5b6143a287828801613ced565b925092505092959194509250565b6000602082840312156143c257600080fd5b60006143d084828501613dc0565b91505092915050565b6000602082840312156143eb57600080fd5b60006143f984828501613dd5565b91505092915050565b60006020828403121561441457600080fd5b600061442284828501613dea565b91505092915050565b6000806020838503121561443e57600080fd5b600083013567ffffffffffffffff81111561445857600080fd5b61446485828601613e29565b92509250509250929050565b60006020828403121561448257600080fd5b600061449084828501613e73565b91505092915050565b6000602082840312156144ab57600080fd5b60006144b984828501613e88565b91505092915050565b600080604083850312156144d557600080fd5b60006144e385828601613e73565b92505060206144f485828601613dab565b9150509250929050565b60008060006040848603121561451357600080fd5b600061452186828701613e73565b935050602084013567ffffffffffffffff81111561453e57600080fd5b61454a86828701613e29565b92509250509250925092565b60008060008060006080868803121561456e57600080fd5b600061457c88828901613e73565b955050602086013567ffffffffffffffff81111561459957600080fd5b6145a588828901613e29565b945094505060406145b888828901613dab565b92505060606145c988828901613c64565b9150509295509295909350565b60006145e28383614606565b60208301905092915050565b60006145fa8383614b1e565b60208301905092915050565b61460f81615340565b82525050565b61461e81615340565b82525050565b600061462f826151ea565b6146398185615230565b9350614644836151b5565b8060005b8381101561467557815161465c88826145d6565b975061466783615216565b925050600181019050614648565b5085935050505092915050565b600061468d826151f5565b6146978185615241565b93506146a2836151c5565b8060005b838110156146d35781516146ba88826145ee565b97506146c583615223565b9250506001810190506146a6565b5085935050505092915050565b6146e981615352565b82525050565b60006146fa82615200565b6147048185615252565b93506147148185602086016153d0565b61471d81615588565b840191505092915050565b60006147348385615263565b93506147418385846153c1565b61474a83615588565b840190509392505050565b60006147608261520b565b61476a8185615263565b935061477a8185602086016153d0565b61478381615588565b840191505092915050565b60006147998261520b565b6147a38185615274565b93506147b38185602086016153d0565b80840191505092915050565b600081546147cc81615403565b6147d68186615263565b945060018216600081146147f1576001811461480357614836565b60ff1983168652602086019350614836565b61480c856151d5565b60005b8381101561482e5781548189015260018201915060208101905061480f565b808801955050505b50505092915050565b600061484c603483615263565b9150614857826155a6565b604082019050919050565b600061486f602883615263565b915061487a826155f5565b604082019050919050565b6000614892600c83615263565b915061489d82615644565b602082019050919050565b60006148b5602b83615263565b91506148c08261566d565b604082019050919050565b60006148d8602683615263565b91506148e3826156bc565b604082019050919050565b60006148fb602483615263565b91506149068261570b565b604082019050919050565b600061491e601483615263565b91506149298261575a565b602082019050919050565b6000614941601383615263565b915061494c82615783565b602082019050919050565b6000614964602583615263565b915061496f826157ac565b604082019050919050565b6000614987603283615263565b9150614992826157fb565b604082019050919050565b60006149aa600f83615263565b91506149b58261584a565b602082019050919050565b60006149cd602383615263565b91506149d882615873565b604082019050919050565b60006149f0602a83615263565b91506149fb826158c2565b604082019050919050565b6000614a13602083615263565b9150614a1e82615911565b602082019050919050565b6000614a36602983615263565b9150614a418261593a565b604082019050919050565b6000614a59602983615263565b9150614a6482615989565b604082019050919050565b6000614a7c602883615263565b9150614a87826159d8565b604082019050919050565b6000614a9f601f83615263565b9150614aaa82615a27565b602082019050919050565b6000614ac2602183615263565b9150614acd82615a50565b604082019050919050565b6000614ae5601f83615263565b9150614af082615a9f565b602082019050919050565b6000614b08601683615263565b9150614b1382615ac8565b602082019050919050565b614b27816153aa565b82525050565b614b36816153aa565b82525050565b6000614b48828561478e565b9150614b54828461478e565b91508190509392505050565b6000602082019050614b756000830184614615565b92915050565b600060a082019050614b906000830188614615565b614b9d6020830187614615565b8181036040830152614baf8186614682565b90508181036060830152614bc38185614682565b90508181036080830152614bd781846146ef565b90509695505050505050565b6000606082019050614bf86000830186614615565b614c056020830185614615565b614c126040830184614b2d565b949350505050565b600060a082019050614c2f6000830188614615565b614c3c6020830187614615565b614c496040830186614b2d565b614c566060830185614b2d565b8181036080830152614c6881846146ef565b90509695505050505050565b60006020820190508181036000830152614c8e8184614624565b905092915050565b60006020820190508181036000830152614cb08184614682565b905092915050565b60006040820190508181036000830152614cd28185614682565b90508181036020830152614ce68184614682565b90509392505050565b6000602082019050614d0460008301846146e0565b92915050565b60006040820190508181036000830152614d25818587614728565b9050614d3460208301846146e0565b949350505050565b60006020820190508181036000830152614d568184614755565b905092915050565b60006060820190508181036000830152614d788186614755565b9050614d8760208301856146e0565b614d946040830184614615565b949350505050565b60006040820190508181036000830152614db681856147bf565b9050614dc560208301846146e0565b9392505050565b60006020820190508181036000830152614de58161483f565b9050919050565b60006020820190508181036000830152614e0581614862565b9050919050565b60006020820190508181036000830152614e2581614885565b9050919050565b60006020820190508181036000830152614e45816148a8565b9050919050565b60006020820190508181036000830152614e65816148cb565b9050919050565b60006020820190508181036000830152614e85816148ee565b9050919050565b60006020820190508181036000830152614ea581614911565b9050919050565b60006020820190508181036000830152614ec581614934565b9050919050565b60006020820190508181036000830152614ee581614957565b9050919050565b60006020820190508181036000830152614f058161497a565b9050919050565b60006020820190508181036000830152614f258161499d565b9050919050565b60006020820190508181036000830152614f45816149c0565b9050919050565b60006020820190508181036000830152614f65816149e3565b9050919050565b60006020820190508181036000830152614f8581614a06565b9050919050565b60006020820190508181036000830152614fa581614a29565b9050919050565b60006020820190508181036000830152614fc581614a4c565b9050919050565b60006020820190508181036000830152614fe581614a6f565b9050919050565b6000602082019050818103600083015261500581614a92565b9050919050565b6000602082019050818103600083015261502581614ab5565b9050919050565b6000602082019050818103600083015261504581614ad8565b9050919050565b6000602082019050818103600083015261506581614afb565b9050919050565b60006020820190506150816000830184614b2d565b92915050565b600060408201905061509c6000830185614b2d565b6150a96020830184614b2d565b9392505050565b600080833560016020038436030381126150c957600080fd5b80840192508235915067ffffffffffffffff8211156150e757600080fd5b6020830192506001820236038313156150ff57600080fd5b509250929050565b6000615111615122565b905061511d8282615435565b919050565b6000604051905090565b600067ffffffffffffffff82111561514757615146615537565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561517357615172615537565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561519f5761519e615537565b5b6151a882615588565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061528a826153aa565b9150615295836153aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152ca576152c96154d9565b5b828201905092915050565b60006152e0826153b4565b91506152eb836153b4565b92508260ff03821115615301576153006154d9565b5b828201905092915050565b6000615317826153b4565b9150615322836153b4565b925082821015615335576153346154d9565b5b828203905092915050565b600061534b8261538a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156153ee5780820151818401526020810190506153d3565b838111156153fd576000848401525b50505050565b6000600282049050600182168061541b57607f821691505b6020821081141561542f5761542e615508565b5b50919050565b61543e82615588565b810181811067ffffffffffffffff8211171561545d5761545c615537565b5b80604052505050565b6000615471826153aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156154a4576154a36154d9565b5b600182019050919050565b60006154ba826153b4565b915060ff8214156154ce576154cd6154d9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156155855760046000803e615582600051615599565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f496e707574206172726179206d69736d61746368000000000000000000000000600082015250565b7f5469657220646f6573206e6f7420657869737400000000000000000000000000600082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f4455504c49434154455f544f4b454e0000000000000000000000000000000000600082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f5472616e736665722064697361626c656420666f722074686973207469657200600082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f5469657220616c72656164792065786973747320666f7220746f6b656e496400600082015250565b7f537472696e672063616e6e6f7420626520656d70747900000000000000000000600082015250565b600060443d1015615b0157615b84565b615b09615122565b60043d036004823e80513d602482011167ffffffffffffffff82111715615b31575050615b84565b808201805167ffffffffffffffff811115615b4f5750505050615b84565b80602083010160043d038501811115615b6c575050505050615b84565b615b7b82602001850186615435565b82955050505050505b90565b615b9081615340565b8114615b9b57600080fd5b50565b615ba781615352565b8114615bb257600080fd5b50565b615bbe8161535e565b8114615bc957600080fd5b50565b615bd5816153aa565b8114615be057600080fd5b5056fea2646970667358221220d71e6ad0533ad08eeff72a09137e249230743436a9b7d32129e751d71ce0dad264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a85760003560e01c80638273a411116100f9578063c1cef73611610097578063f242432a11610071578063f242432a146104c5578063f2fde38b146104e1578063f5298aca146104fd578063fa6cca1014610519576101a8565b8063c1cef7361461045d578063d2047b5414610479578063e985e9c514610495576101a8565b80638e7cb179116100d35780638e7cb179146103d957806397c7cc8714610409578063a22cb46514610425578063ba74869814610441576101a8565b80638273a4111461036f57806384385b6b1461039f5780638da5cb5b146103bb576101a8565b8063351521cd116101665780635969caf1116101405780635969caf1146102f9578063715018a614610315578063732a4d311461031f578063818f2e421461033d576101a8565b8063351521cd14610291578063492d306b146102ad5780634e1273f4146102c9576101a8565b8062fdd58e146101ad57806301ffc9a7146101dd578063036789d11461020d5780630e89341c14610229578063156e29f6146102595780632eb2c2d614610275575b600080fd5b6101c760048036038101906101c291906140ef565b610535565b6040516101d4919061506c565b60405180910390f35b6101f760048036038101906101f291906143d9565b6105ff565b6040516102049190614cef565b60405180910390f35b6102276004803603810190610222919061433b565b6106e1565b005b610243600480360381019061023e9190614470565b610869565b6040516102509190614d3c565b60405180910390f35b610273600480360381019061026e919061412b565b610931565b005b61028f600480360381019061028a9190613f02565b6109c1565b005b6102ab60048036038101906102a6919061417a565b610a62565b005b6102c760048036038101906102c2919061442b565b610c80565b005b6102e360048036038101906102de91906142cf565b610dde565b6040516102f09190614c96565b60405180910390f35b610313600480360381019061030e91906144c2565b610f8f565b005b61031d611175565b005b6103276111fd565b6040516103349190614c74565b60405180910390f35b61035760048036038101906103529190614470565b611358565b60405161036693929190614d5e565b60405180910390f35b61038960048036038101906103849190613e9d565b611437565b6040516103969190614c96565b60405180910390f35b6103b960048036038101906103b49190613fc1565b611536565b005b6103c3611684565b6040516103d09190614b60565b60405180910390f35b6103f360048036038101906103ee9190613e9d565b6116ad565b604051610400919061506c565b60405180910390f35b610423600480360381019061041e91906144fe565b6116c5565b005b61043f600480360381019061043a91906140b3565b611751565b005b61045b6004803603810190610456919061425f565b611767565b005b61047760048036038101906104729190614556565b6119a9565b005b610493600480360381019061048e919061417a565b611cf0565b005b6104af60048036038101906104aa9190613ec6565b611f12565b6040516104bc9190614cef565b60405180910390f35b6104df60048036038101906104da9190614024565b611fa6565b005b6104fb60048036038101906104f69190613e9d565b6120f2565b005b6105176004803603810190610512919061412b565b6121ea565b005b610533600480360381019061052e919061421e565b612276565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90614e2c565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106ca57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106da57506106d982612456565b5b9050919050565b6106e96124c0565b73ffffffffffffffffffffffffffffffffffffffff16610707611684565b73ffffffffffffffffffffffffffffffffffffffff161461075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490614f6c565b60405180910390fd5b8181905084849050146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90614e8c565b60405180910390fd5b60005b848490508160ff1610156108625761084f85858360ff168181106107f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013584848460ff16818110610838577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061084a91906150b0565b6124c8565b808061085a906154af565b9150506107a8565b5050505050565b60606000610876836126cc565b905061092960046000858152602001908152602001600020600001805461089c90615403565b80601f01602080910402602001604051908101604052809291908181526020018280546108c890615403565b80156109155780601f106108ea57610100808354040283529160200191610915565b820191906000526020600020905b8154815290600101906020018083116108f857829003601f168201915b50505050508261276090919063ffffffff16565b915050919050565b6109396124c0565b73ffffffffffffffffffffffffffffffffffffffff16610957611684565b73ffffffffffffffffffffffffffffffffffffffff16146109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490614f6c565b60405180910390fd5b60606109bb8484848461278c565b50505050565b6109c96124c0565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a0f5750610a0e85610a096124c0565b611f12565b5b610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4590614eec565b60405180910390fd5b610a5b8585858585612887565b5050505050565b610a6a6124c0565b73ffffffffffffffffffffffffffffffffffffffff16610a88611684565b73ffffffffffffffffffffffffffffffffffffffff1614610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590614f6c565b60405180910390fd5b85858585858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508282905085859050148015610b3c5750805183839050145b610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290614e8c565b60405180910390fd5b60005b8b8b9050811015610c7257610c5f8c8c83818110610bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610bda9190613e9d565b8b8b84818110610c13577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358a8a85818110610c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135612bea565b8080610c6a90615466565b915050610b7e565b505050505050505050505050565b610c886124c0565b73ffffffffffffffffffffffffffffffffffffffff16610ca6611684565b73ffffffffffffffffffffffffffffffffffffffff1614610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390614f6c565b60405180910390fd5b8181610d4b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ce3565b15610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d829061504c565b60405180910390fd5b610dd884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612cf0565b50505050565b60608151835114610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b90614fac565b60405180910390fd5b6000835167ffffffffffffffff811115610e67577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e955781602001602082028036833780820191505090505b50905060005b8451811015610f8457610f2e858281518110610ee0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610535565b828281518110610f67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080610f7d90615466565b9050610e9b565b508091505092915050565b610f976124c0565b73ffffffffffffffffffffffffffffffffffffffff16610fb5611684565b73ffffffffffffffffffffffffffffffffffffffff161461100b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100290614f6c565b60405180910390fd5b816110b360046000838152602001908152602001600020600001805461103090615403565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90615403565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b5050505050612ce3565b156110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90614eac565b60405180910390fd5b816004600085815260200190815260200160002060010160006101000a81548160ff021916908315150217905550827f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced6004600086815260200190815260200160002060000184604051611168929190614d9c565b60405180910390a2505050565b61117d6124c0565b73ffffffffffffffffffffffffffffffffffffffff1661119b611684565b73ffffffffffffffffffffffffffffffffffffffff16146111f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e890614f6c565b60405180910390fd5b6111fb6000612d0a565b565b606060065467ffffffffffffffff811115611241577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561126f5781602001602082028036833780820191505090505b5090506000600190505b6006548160ff161161135457600460008260ff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001836112cd919061530c565b60ff1681518110611307577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061134c906154af565b915050611279565b5090565b600460205280600052604060002060009150905080600001805461137b90615403565b80601f01602080910402602001604051908101604052809291908181526020018280546113a790615403565b80156113f45780601f106113c9576101008083540402835291602001916113f4565b820191906000526020600020905b8154815290600101906020018083116113d757829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b606060065467ffffffffffffffff81111561147b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114a95781602001602082028036833780820191505090505b50905060005b6006548160ff161015611530576114d5836001836114cd91906152d5565b60ff16610535565b828260ff1681518110611511577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611528906154af565b9150506114af565b50919050565b81846004600083815260200190815260200160002060010160009054906101000a900460ff1661159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159290614fec565b60405180910390fd5b6115a36124c0565b73ffffffffffffffffffffffffffffffffffffffff166115c1611684565b73ffffffffffffffffffffffffffffffffffffffff16148061161557506115e66124c0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061162d575061162c816116276124c0565b611f12565b5b61166c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166390614e0c565b60405180910390fd5b606061167b8787878785612dce565b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60056020528060005260406000206000915090505481565b6116cd6124c0565b73ffffffffffffffffffffffffffffffffffffffff166116eb611684565b73ffffffffffffffffffffffffffffffffffffffff1614611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890614f6c565b60405180910390fd5b61174c8383836124c8565b505050565b61176361175c6124c0565b8383613053565b5050565b61176f6124c0565b73ffffffffffffffffffffffffffffffffffffffff1661178d611684565b73ffffffffffffffffffffffffffffffffffffffff16146117e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117da90614f6c565b60405180910390fd5b6000600654905060005b84518160ff16101561199b576000858260ff1681518110611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba90614f0c565b60405180910390fd5b6001836118d0919061527f565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611979600184611923919061527f565b86868560ff1681811061195f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061197191906150b0565b6000856119a9565b828061198490615466565b935050508080611993906154af565b9150506117ed565b508060068190555050505050565b6119b16124c0565b73ffffffffffffffffffffffffffffffffffffffff166119cf611684565b73ffffffffffffffffffffffffffffffffffffffff1614611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c90614f6c565b60405180910390fd5b8383611a7482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ce3565b15611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab9061504c565b60405180910390fd5b611b5b600460008981526020019081526020016000206000018054611ad890615403565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0490615403565b8015611b515780601f10611b2657610100808354040283529160200191611b51565b820191906000526020600020905b815481529060010190602001808311611b3457829003601f168201915b5050505050612ce3565b611b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b919061502c565b60405180910390fd5b604051806060016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185151581526020018473ffffffffffffffffffffffffffffffffffffffff16815250600460008981526020019081526020016000206000820151816000019080519060200190611c40929190613a25565b5060208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050867f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced878787604051611cdf93929190614d0a565b60405180910390a250505050505050565b611cf86124c0565b73ffffffffffffffffffffffffffffffffffffffff16611d16611684565b73ffffffffffffffffffffffffffffffffffffffff1614611d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6390614f6c565b60405180910390fd5b85858585858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508282905085859050148015611dca5750805183839050145b611e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0090614e8c565b60405180910390fd5b606060005b8c8c9050811015611f0357611ef08d8d83818110611e55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611e6a9190613e9d565b8c8c84818110611ea3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358b8b85818110611ee3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358561278c565b8080611efb90615466565b915050611e0e565b50505050505050505050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b82856004600083815260200190815260200160002060010160009054906101000a900460ff1661200b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200290614fec565b60405180910390fd5b6120136124c0565b73ffffffffffffffffffffffffffffffffffffffff16612031611684565b73ffffffffffffffffffffffffffffffffffffffff16148061208557506120566124c0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061209d575061209c816120976124c0565b611f12565b5b6120dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d390614e0c565b60405180910390fd5b6120e98787878787612dce565b50505050505050565b6120fa6124c0565b73ffffffffffffffffffffffffffffffffffffffff16612118611684565b73ffffffffffffffffffffffffffffffffffffffff161461216e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216590614f6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d590614e4c565b60405180910390fd5b6121e781612d0a565b50565b6121f26124c0565b73ffffffffffffffffffffffffffffffffffffffff16612210611684565b73ffffffffffffffffffffffffffffffffffffffff1614612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225d90614f6c565b60405180910390fd5b612271838383612bea565b505050565b60606000805b83518160ff16101561245057838160ff16815181106122c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915060008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016123099190614b60565b60206040518083038186803b15801561232157600080fd5b505afa158015612335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123599190614499565b90506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016123dc93929190614be3565b602060405180830381600087803b1580156123f657600080fd5b505af115801561240a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242e91906143b0565b5061243b3382848861278c565b50508080612448906154af565b91505061227c565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b826125706004600083815260200190815260200160002060000180546124ed90615403565b80601f016020809104026020016040519081016040528092919081815260200182805461251990615403565b80156125665780601f1061253b57610100808354040283529160200191612566565b820191906000526020600020905b81548152906001019060200180831161254957829003601f168201915b5050505050612ce3565b156125b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a790614eac565b60405180910390fd5b82826125ff82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ce3565b1561263f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126369061504c565b60405180910390fd5b8484600460008981526020019081526020016000206000019190612664929190613aab565b50857f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced8686600460008b815260200190815260200160002060010160009054906101000a900460ff166040516126bc93929190614d0a565b60405180910390a2505050505050565b6060600380546126db90615403565b80601f016020809104026020016040519081016040528092919081815260200182805461270790615403565b80156127545780601f1061272957610100808354040283529160200191612754565b820191906000526020600020905b81548152906001019060200180831161273757829003601f168201915b50505050509050919050565b60608282604051602001612775929190614b3c565b604051602081830303815290604052905092915050565b826128346004600083815260200190815260200160002060000180546127b190615403565b80601f01602080910402602001604051908101604052809291908181526020018280546127dd90615403565b801561282a5780601f106127ff5761010080835404028352916020019161282a565b820191906000526020600020905b81548152906001019060200180831161280d57829003601f168201915b5050505050612ce3565b15612874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286b90614eac565b60405180910390fd5b612880858585856131c0565b5050505050565b81518351146128cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c290614fcc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561293b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293290614ecc565b60405180910390fd5b60006129456124c0565b9050612955818787878787613357565b60005b8451811015612b5557600085828151811061299c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008583815181106129e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7a90614f4c565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b3a919061527f565b9250508190555050505080612b4e90615466565b9050612958565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612bcc929190614cb8565b60405180910390a4612be281878787878761335f565b505050505050565b81612c92600460008381526020019081526020016000206000018054612c0f90615403565b80601f0160208091040260200160405190810160405280929190818152602001828054612c3b90615403565b8015612c885780601f10612c5d57610100808354040283529160200191612c88565b820191906000526020600020905b815481529060010190602001808311612c6b57829003601f168201915b5050505050612ce3565b15612cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc990614eac565b60405180910390fd5b612cdd848484613546565b50505050565b6000808251149050919050565b8060039080519060200190612d06929190613a25565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3590614ecc565b60405180910390fd5b6000612e486124c0565b9050612e68818787612e5988613765565b612e6288613765565b87613357565b60006001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef790614f4c565b60405180910390fd5b8381036001600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fb7919061527f565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051613034929190615087565b60405180910390a461304a82888888888861382b565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130b990614f8c565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516131b39190614cef565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613230576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132279061500c565b60405180910390fd5b600061323a6124c0565b905061325b8160008761324c88613765565b61325588613765565b87613357565b826001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132bb919061527f565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051613339929190615087565b60405180910390a46133508160008787878761382b565b5050505050565b505050505050565b61337e8473ffffffffffffffffffffffffffffffffffffffff16613a12565b1561353e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016133c4959493929190614b7b565b602060405180830381600087803b1580156133de57600080fd5b505af192505050801561340f57506040513d601f19601f8201168201806040525081019061340c9190614402565b60015b6134b55761341b615566565b806308c379a014156134785750613430615af1565b8061343b575061347a565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346f9190614d3c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ac90614dcc565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461353c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353390614dec565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ad90614f2c565b60405180910390fd5b60006135c06124c0565b90506135f0818560006135d287613765565b6135db87613765565b60405180602001604052806000815250613357565b60006001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015613688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161367f90614e6c565b60405180910390fd5b8281036001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051613756929190615087565b60405180910390a45050505050565b60606000600167ffffffffffffffff8111156137aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156137d85781602001602082028036833780820191505090505b5090508281600081518110613816577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b61384a8473ffffffffffffffffffffffffffffffffffffffff16613a12565b15613a0a578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613890959493929190614c1a565b602060405180830381600087803b1580156138aa57600080fd5b505af19250505080156138db57506040513d601f19601f820116820180604052508101906138d89190614402565b60015b613981576138e7615566565b806308c379a0141561394457506138fc615af1565b806139075750613946565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161393b9190614d3c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161397890614dcc565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ff90614dec565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b828054613a3190615403565b90600052602060002090601f016020900481019282613a535760008555613a9a565b82601f10613a6c57805160ff1916838001178555613a9a565b82800160010185558215613a9a579182015b82811115613a99578251825591602001919060010190613a7e565b5b509050613aa79190613b31565b5090565b828054613ab790615403565b90600052602060002090601f016020900481019282613ad95760008555613b20565b82601f10613af257803560ff1916838001178555613b20565b82800160010185558215613b20579182015b82811115613b1f578235825591602001919060010190613b04565b5b509050613b2d9190613b31565b5090565b5b80821115613b4a576000816000905550600101613b32565b5090565b6000613b61613b5c8461512c565b615107565b90508083825260208201905082856020860282011115613b8057600080fd5b60005b85811015613bb05781613b968882613c64565b845260208401935060208301925050600181019050613b83565b5050509392505050565b6000613bcd613bc884615158565b615107565b90508083825260208201905082856020860282011115613bec57600080fd5b60005b85811015613c1c5781613c028882613e73565b845260208401935060208301925050600181019050613bef565b5050509392505050565b6000613c39613c3484615184565b615107565b905082815260208101848484011115613c5157600080fd5b613c5c8482856153c1565b509392505050565b600081359050613c7381615b87565b92915050565b60008083601f840112613c8b57600080fd5b8235905067ffffffffffffffff811115613ca457600080fd5b602083019150836020820283011115613cbc57600080fd5b9250929050565b600082601f830112613cd457600080fd5b8135613ce4848260208601613b4e565b91505092915050565b60008083601f840112613cff57600080fd5b8235905067ffffffffffffffff811115613d1857600080fd5b602083019150836020820283011115613d3057600080fd5b9250929050565b60008083601f840112613d4957600080fd5b8235905067ffffffffffffffff811115613d6257600080fd5b602083019150836020820283011115613d7a57600080fd5b9250929050565b600082601f830112613d9257600080fd5b8135613da2848260208601613bba565b91505092915050565b600081359050613dba81615b9e565b92915050565b600081519050613dcf81615b9e565b92915050565b600081359050613de481615bb5565b92915050565b600081519050613df981615bb5565b92915050565b600082601f830112613e1057600080fd5b8135613e20848260208601613c26565b91505092915050565b60008083601f840112613e3b57600080fd5b8235905067ffffffffffffffff811115613e5457600080fd5b602083019150836001820283011115613e6c57600080fd5b9250929050565b600081359050613e8281615bcc565b92915050565b600081519050613e9781615bcc565b92915050565b600060208284031215613eaf57600080fd5b6000613ebd84828501613c64565b91505092915050565b60008060408385031215613ed957600080fd5b6000613ee785828601613c64565b9250506020613ef885828601613c64565b9150509250929050565b600080600080600060a08688031215613f1a57600080fd5b6000613f2888828901613c64565b9550506020613f3988828901613c64565b945050604086013567ffffffffffffffff811115613f5657600080fd5b613f6288828901613d81565b935050606086013567ffffffffffffffff811115613f7f57600080fd5b613f8b88828901613d81565b925050608086013567ffffffffffffffff811115613fa857600080fd5b613fb488828901613dff565b9150509295509295909350565b60008060008060808587031215613fd757600080fd5b6000613fe587828801613c64565b9450506020613ff687828801613c64565b935050604061400787828801613e73565b925050606061401887828801613e73565b91505092959194509250565b600080600080600060a0868803121561403c57600080fd5b600061404a88828901613c64565b955050602061405b88828901613c64565b945050604061406c88828901613e73565b935050606061407d88828901613e73565b925050608086013567ffffffffffffffff81111561409a57600080fd5b6140a688828901613dff565b9150509295509295909350565b600080604083850312156140c657600080fd5b60006140d485828601613c64565b92505060206140e585828601613dab565b9150509250929050565b6000806040838503121561410257600080fd5b600061411085828601613c64565b925050602061412185828601613e73565b9150509250929050565b60008060006060848603121561414057600080fd5b600061414e86828701613c64565b935050602061415f86828701613e73565b925050604061417086828701613e73565b9150509250925092565b6000806000806000806060878903121561419357600080fd5b600087013567ffffffffffffffff8111156141ad57600080fd5b6141b989828a01613c79565b9650965050602087013567ffffffffffffffff8111156141d857600080fd5b6141e489828a01613d37565b9450945050604087013567ffffffffffffffff81111561420357600080fd5b61420f89828a01613d37565b92509250509295509295509295565b60006020828403121561423057600080fd5b600082013567ffffffffffffffff81111561424a57600080fd5b61425684828501613cc3565b91505092915050565b60008060006040848603121561427457600080fd5b600084013567ffffffffffffffff81111561428e57600080fd5b61429a86828701613cc3565b935050602084013567ffffffffffffffff8111156142b757600080fd5b6142c386828701613ced565b92509250509250925092565b600080604083850312156142e257600080fd5b600083013567ffffffffffffffff8111156142fc57600080fd5b61430885828601613cc3565b925050602083013567ffffffffffffffff81111561432557600080fd5b61433185828601613d81565b9150509250929050565b6000806000806040858703121561435157600080fd5b600085013567ffffffffffffffff81111561436b57600080fd5b61437787828801613d37565b9450945050602085013567ffffffffffffffff81111561439657600080fd5b6143a287828801613ced565b925092505092959194509250565b6000602082840312156143c257600080fd5b60006143d084828501613dc0565b91505092915050565b6000602082840312156143eb57600080fd5b60006143f984828501613dd5565b91505092915050565b60006020828403121561441457600080fd5b600061442284828501613dea565b91505092915050565b6000806020838503121561443e57600080fd5b600083013567ffffffffffffffff81111561445857600080fd5b61446485828601613e29565b92509250509250929050565b60006020828403121561448257600080fd5b600061449084828501613e73565b91505092915050565b6000602082840312156144ab57600080fd5b60006144b984828501613e88565b91505092915050565b600080604083850312156144d557600080fd5b60006144e385828601613e73565b92505060206144f485828601613dab565b9150509250929050565b60008060006040848603121561451357600080fd5b600061452186828701613e73565b935050602084013567ffffffffffffffff81111561453e57600080fd5b61454a86828701613e29565b92509250509250925092565b60008060008060006080868803121561456e57600080fd5b600061457c88828901613e73565b955050602086013567ffffffffffffffff81111561459957600080fd5b6145a588828901613e29565b945094505060406145b888828901613dab565b92505060606145c988828901613c64565b9150509295509295909350565b60006145e28383614606565b60208301905092915050565b60006145fa8383614b1e565b60208301905092915050565b61460f81615340565b82525050565b61461e81615340565b82525050565b600061462f826151ea565b6146398185615230565b9350614644836151b5565b8060005b8381101561467557815161465c88826145d6565b975061466783615216565b925050600181019050614648565b5085935050505092915050565b600061468d826151f5565b6146978185615241565b93506146a2836151c5565b8060005b838110156146d35781516146ba88826145ee565b97506146c583615223565b9250506001810190506146a6565b5085935050505092915050565b6146e981615352565b82525050565b60006146fa82615200565b6147048185615252565b93506147148185602086016153d0565b61471d81615588565b840191505092915050565b60006147348385615263565b93506147418385846153c1565b61474a83615588565b840190509392505050565b60006147608261520b565b61476a8185615263565b935061477a8185602086016153d0565b61478381615588565b840191505092915050565b60006147998261520b565b6147a38185615274565b93506147b38185602086016153d0565b80840191505092915050565b600081546147cc81615403565b6147d68186615263565b945060018216600081146147f1576001811461480357614836565b60ff1983168652602086019350614836565b61480c856151d5565b60005b8381101561482e5781548189015260018201915060208101905061480f565b808801955050505b50505092915050565b600061484c603483615263565b9150614857826155a6565b604082019050919050565b600061486f602883615263565b915061487a826155f5565b604082019050919050565b6000614892600c83615263565b915061489d82615644565b602082019050919050565b60006148b5602b83615263565b91506148c08261566d565b604082019050919050565b60006148d8602683615263565b91506148e3826156bc565b604082019050919050565b60006148fb602483615263565b91506149068261570b565b604082019050919050565b600061491e601483615263565b91506149298261575a565b602082019050919050565b6000614941601383615263565b915061494c82615783565b602082019050919050565b6000614964602583615263565b915061496f826157ac565b604082019050919050565b6000614987603283615263565b9150614992826157fb565b604082019050919050565b60006149aa600f83615263565b91506149b58261584a565b602082019050919050565b60006149cd602383615263565b91506149d882615873565b604082019050919050565b60006149f0602a83615263565b91506149fb826158c2565b604082019050919050565b6000614a13602083615263565b9150614a1e82615911565b602082019050919050565b6000614a36602983615263565b9150614a418261593a565b604082019050919050565b6000614a59602983615263565b9150614a6482615989565b604082019050919050565b6000614a7c602883615263565b9150614a87826159d8565b604082019050919050565b6000614a9f601f83615263565b9150614aaa82615a27565b602082019050919050565b6000614ac2602183615263565b9150614acd82615a50565b604082019050919050565b6000614ae5601f83615263565b9150614af082615a9f565b602082019050919050565b6000614b08601683615263565b9150614b1382615ac8565b602082019050919050565b614b27816153aa565b82525050565b614b36816153aa565b82525050565b6000614b48828561478e565b9150614b54828461478e565b91508190509392505050565b6000602082019050614b756000830184614615565b92915050565b600060a082019050614b906000830188614615565b614b9d6020830187614615565b8181036040830152614baf8186614682565b90508181036060830152614bc38185614682565b90508181036080830152614bd781846146ef565b90509695505050505050565b6000606082019050614bf86000830186614615565b614c056020830185614615565b614c126040830184614b2d565b949350505050565b600060a082019050614c2f6000830188614615565b614c3c6020830187614615565b614c496040830186614b2d565b614c566060830185614b2d565b8181036080830152614c6881846146ef565b90509695505050505050565b60006020820190508181036000830152614c8e8184614624565b905092915050565b60006020820190508181036000830152614cb08184614682565b905092915050565b60006040820190508181036000830152614cd28185614682565b90508181036020830152614ce68184614682565b90509392505050565b6000602082019050614d0460008301846146e0565b92915050565b60006040820190508181036000830152614d25818587614728565b9050614d3460208301846146e0565b949350505050565b60006020820190508181036000830152614d568184614755565b905092915050565b60006060820190508181036000830152614d788186614755565b9050614d8760208301856146e0565b614d946040830184614615565b949350505050565b60006040820190508181036000830152614db681856147bf565b9050614dc560208301846146e0565b9392505050565b60006020820190508181036000830152614de58161483f565b9050919050565b60006020820190508181036000830152614e0581614862565b9050919050565b60006020820190508181036000830152614e2581614885565b9050919050565b60006020820190508181036000830152614e45816148a8565b9050919050565b60006020820190508181036000830152614e65816148cb565b9050919050565b60006020820190508181036000830152614e85816148ee565b9050919050565b60006020820190508181036000830152614ea581614911565b9050919050565b60006020820190508181036000830152614ec581614934565b9050919050565b60006020820190508181036000830152614ee581614957565b9050919050565b60006020820190508181036000830152614f058161497a565b9050919050565b60006020820190508181036000830152614f258161499d565b9050919050565b60006020820190508181036000830152614f45816149c0565b9050919050565b60006020820190508181036000830152614f65816149e3565b9050919050565b60006020820190508181036000830152614f8581614a06565b9050919050565b60006020820190508181036000830152614fa581614a29565b9050919050565b60006020820190508181036000830152614fc581614a4c565b9050919050565b60006020820190508181036000830152614fe581614a6f565b9050919050565b6000602082019050818103600083015261500581614a92565b9050919050565b6000602082019050818103600083015261502581614ab5565b9050919050565b6000602082019050818103600083015261504581614ad8565b9050919050565b6000602082019050818103600083015261506581614afb565b9050919050565b60006020820190506150816000830184614b2d565b92915050565b600060408201905061509c6000830185614b2d565b6150a96020830184614b2d565b9392505050565b600080833560016020038436030381126150c957600080fd5b80840192508235915067ffffffffffffffff8211156150e757600080fd5b6020830192506001820236038313156150ff57600080fd5b509250929050565b6000615111615122565b905061511d8282615435565b919050565b6000604051905090565b600067ffffffffffffffff82111561514757615146615537565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561517357615172615537565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561519f5761519e615537565b5b6151a882615588565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061528a826153aa565b9150615295836153aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152ca576152c96154d9565b5b828201905092915050565b60006152e0826153b4565b91506152eb836153b4565b92508260ff03821115615301576153006154d9565b5b828201905092915050565b6000615317826153b4565b9150615322836153b4565b925082821015615335576153346154d9565b5b828203905092915050565b600061534b8261538a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156153ee5780820151818401526020810190506153d3565b838111156153fd576000848401525b50505050565b6000600282049050600182168061541b57607f821691505b6020821081141561542f5761542e615508565b5b50919050565b61543e82615588565b810181811067ffffffffffffffff8211171561545d5761545c615537565b5b80604052505050565b6000615471826153aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156154a4576154a36154d9565b5b600182019050919050565b60006154ba826153b4565b915060ff8214156154ce576154cd6154d9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156155855760046000803e615582600051615599565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f496e707574206172726179206d69736d61746368000000000000000000000000600082015250565b7f5469657220646f6573206e6f7420657869737400000000000000000000000000600082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f4455504c49434154455f544f4b454e0000000000000000000000000000000000600082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f5472616e736665722064697361626c656420666f722074686973207469657200600082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f5469657220616c72656164792065786973747320666f7220746f6b656e496400600082015250565b7f537472696e672063616e6e6f7420626520656d70747900000000000000000000600082015250565b600060443d1015615b0157615b84565b615b09615122565b60043d036004823e80513d602482011167ffffffffffffffff82111715615b31575050615b84565b808201805167ffffffffffffffff811115615b4f5750505050615b84565b80602083010160043d038501811115615b6c575050505050615b84565b615b7b82602001850186615435565b82955050505050505b90565b615b9081615340565b8114615b9b57600080fd5b50565b615ba781615352565b8114615bb257600080fd5b50565b615bbe8161535e565b8114615bc957600080fd5b50565b615bd5816153aa565b8114615be057600080fd5b5056fea2646970667358221220d71e6ad0533ad08eeff72a09137e249230743436a9b7d32129e751d71ce0dad264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "burns specified amount token(s) of specific id from specified account",
        "params": {
          "account": "address of token holder",
          "amount": "units of token to be burnt from beneficiary",
          "id": "id of token, aka. tier"
        }
      },
      "burnFromMultiple(address[],uint256[],uint256[])": {
        "details": "burns from multiple addresses arbitrary units of tokens of ONE token id per address                      example: burn 3 units of tokenId 1 from alice and 4 units of tokenId 2 froms bob",
        "params": {
          "accounts": "list of token holder addresses",
          "amounts": "list of burn amounts",
          "tokenIds": "list of token ids (aka tiers)"
        }
      },
      "changeBaseUri(string)": {
        "details": "sets a base uri, that is the first part of the url where the metadata for a tokenId is stored",
        "params": {
          "_newBaseUri": "baseUrl (e.g. www.filestoring.com/)"
        }
      },
      "createTokenTier(uint256,string,bool,address)": {
        "details": "creates a new token tier",
        "params": {
          "tokenId": "identifier for the new token tier",
          "transferable": "determines if tokens from specific tier should be transferable or not",
          "uriId": "identifier that is appended to the baseUri together forming the uri where the metadata lives"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256)": {
        "details": "mints specified amount token(s) of specific id to specified account",
        "params": {
          "account": "beneficiary address",
          "amount": "units of token to be minted to beneficiary",
          "id": "id of token, aka. tier"
        }
      },
      "mintToMultiple(address[],uint256[],uint256[])": {
        "details": "mints to multiple addresses arbitrary units of tokens of ONE token id per address",
        "params": {
          "accounts": "list of beneficiary addresses",
          "amounts": "list of mint amounts",
          "tokenIds": "list of token ids (aka tiers)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "transfers tokens from one address to another allowing custom data parameter",
        "params": {
          "amount": "amount of token to be transferred",
          "from": "address from which token will be transferred",
          "id": "id of token to be transferred",
          "to": "recipient of address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferFromWithoutData(address,address,uint256,uint256)": {
        "details": "transfers tokens from one address to another and uses 0x0 as default data parameter",
        "params": {
          "amount": "amount of token to be transferred",
          "from": "address from which token will be transferred",
          "id": "id of token to be transferred",
          "to": "recipient of address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMultipleUriIdentifiers(uint256[],string[])": {
        "details": "update uri identifiers for multiple token ids (tiers)",
        "params": {
          "tokenIds": "tokenIds for which the uri should be updated (must be in same order as uriIds)",
          "uriIds": "identifiers that are appended to the baseUri together forming the uri where the metadata lives (must be in same order ass tokenIds)"
        }
      },
      "updateTransferableStatus(uint256,bool)": {
        "details": "updates transferability for a given token id (tier)",
        "params": {
          "tokenId": "tokenId for which transferability should be updated",
          "transferable": "determines whether tokens from tier should be transferable or not"
        }
      },
      "updateUriIdentifier(uint256,string)": {
        "details": "updates the identifier that is appended to the baseUri for a specific tokenId (tier)",
        "params": {
          "tokenId": "tokenId for which the uri should be updated",
          "uriId": "identifier that is appended to the baseUri together forming the uri where the metadata lives"
        }
      },
      "uri(uint256)": {
        "details": "returns the uri for a given token",
        "params": {
          "tokenId": "tokenId for which the uri should be retrieved"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintToMultiple(address[],uint256[],uint256[])": {
        "notice": "example: mint 3 units of tokenId 1 to alice and 4 units of tokenId 2 to bob"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "this is the standard transfer interface for ERC1155 tokens which contracts expect"
      },
      "transferFromWithoutData(address,address,uint256,uint256)": {
        "notice": "this is mainly used for manual contract interactions via etherscan"
      },
      "uri(uint256)": {
        "notice": "consists of a concatenation of baseUri and uriId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2399,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "tokenTiers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenTier)2406_storage)"
      },
      {
        "astId": 2992,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "boxTokenTiers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2994,
        "contract": "contracts/Karmic.sol:Karmic",
        "label": "boxTokenCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(TokenTier)2406_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Badger.TokenTier)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenTier)2406_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenTier)2406_storage": {
        "encoding": "inplace",
        "label": "struct Badger.TokenTier",
        "members": [
          {
            "astId": 2401,
            "contract": "contracts/Karmic.sol:Karmic",
            "label": "uriId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2403,
            "contract": "contracts/Karmic.sol:Karmic",
            "label": "transferable",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2405,
            "contract": "contracts/Karmic.sol:Karmic",
            "label": "boxToken",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}